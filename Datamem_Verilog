/* Below is the data memory module. There are up to 16  bit address available
    The memory has two modes memory read or memory write.
*/

module dataMem(input MemWrite, MemRead, [31:0] Addr, WriteData, output [31:0] ReadData);
    reg [31:0] MEM [65535:0];
    reg [31:0] adjAddr, RD = 0;
    assign adjAddr ={16'h0000, Addr[15:0]}; //Has to be adjusted since we can only do half of the memory address
    assign ReadData = RD;
    always @(MemRead or adjAddr)
    begin
        if(MemRead)
            RD <= MEM[adjAddr];
    end
    always @(MemWrite or adjAddr or WriteData)
    begin
        if(MemWrite)
            MEM[adjAddr] <= WriteData;        
    end
endmodule
/* Below is the testbench for the datamemory which will go through the memread and memorywrite
    Trying to verify the operations
*/
`timescale 1ns/10ps
module dataMem_tb;
    reg clk, MemWrite, MemRead;
    reg [31:0] Addr, WriteData;
    wire [31:0] ReadData;
    localparam period =10;
    always #(period/2) clk =~clk;
    initial begin
        clk        <= 0;
        MemRead    <= 0;
        MemWrite   <= 1;
        Addr       <= 32'h0000BEEF;
        WriteData  <= 32'hFEFEFEFE;
        #(period)
        MemWrite   <= 0;
        MemRead    <= 1;
        #period   
        MemWrite   <= 1;
        MemRead    <= 0;
        Addr       <= 32'hBEEFDEAD;
        WriteData  <= 32'hBEEFDEAD;
        #period
        MemWrite   <=0;
        MemRead    <=1;
    end
    dataMem UUT( .MemWrite  ( MemWrite),.MemRead(MemRead),.Addr(Addr),.WriteData(WriteData),.ReadData(ReadData));
endmodule
