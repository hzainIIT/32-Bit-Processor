/*
In this testbench file we test the EX stage with the control unit.
 We go through all of the instructions. 
 The arithmetic on this was checked in the ALU.v file
*/
`timescale 1ns/10ps
module EX_tb;
    //Vars for both 
    reg clk =0;
    // Vars for the EX stage
    reg [4:0] Instr2, Instr3 =0;
    reg [31:0] PCAddr, RD1, RD2, Instr1 =0;
    wire Zero, Overflow;
    wire [4:0] RegDstOut;
    wire [31:0] ALUResult, RD2Out, PCAddition;
    wire [1:0] ALUOp;

    // Vars for the MainControl Unit
    reg [5:0] op;    
    wire  ALUSrc, RegDst; // Signals used this in this testbench
    wire  reg_write, mem_read, mem_write, mem_to_reg, branch;
    reg [31:0]Instruction=0;
    localparam period = 10;
    always #(period/2) clk =~clk;
    assign Instr1 = {{16{Instruction[15]}},Instruction[15:0]};
    assign Instr2 = Instruction[20:16];
    assign instr3 = Instruction[15:11];
    assign op     = Instruction[31:26];
    reg [31:0] c,d =0;
    initial begin
        clk 	       <= 0;
        cycle_instruction(32'h02339022, 32'h11111111, 32'h22222222, 32'hDEADBEEF); // sub  sub $s2, $s1, $s3	HEX: 0x02339022
        #(period)
        cycle_instruction(32'h024D5024, 32'h11111111, 32'h22222222, 32'hDEADBEEF);  // and   and $t2, $s2, $t5   HEX: 0x024D5024
        #(period)
        cycle_instruction(32'h020A5025, 32'h11111111, 32'h22222222, 32'hDEADBEEF);   // or	or $t2, $s0, $t2	HEX: 0x020A5025)
        #(period)
        cycle_instruction(32'h01289820, 32'h11111111, 32'h22222222, 32'hDEADBEEF);  // add1  add1 $s3, $t1, $t0  HEX: 0x01289820
        #(period)
        cycle_instruction(32'h8E4B0064, 32'h11111111, 32'h22222222, 32'hDEADBEEF);  // lw	lw $t3, 100($s2)	HEX: 0x8E4B0064
        #(period)
        cycle_instruction(32'h217400C8, 32'h11111111, 32'h22222222, 32'hDEADBEEF);  // addi  addi $s4, $t3, 200  HEX: 0x217400C8
        #(period)
        cycle_instruction(32'hAD490064, 32'h11111111, 32'h22222222, 32'hDEADBEEF);  // sw	sw $t1, 100($t2)	HEX: 0xAD490064
        #(period)
        cycle_instruction(32'h02284827, 32'h11111111, 32'h22222222, 32'hDEADBEEF);  // nor   nor $t1, $s1, $t0   HEX: 0x02284827
        #(period)
        cycle_instruction(32'h0252482A, 32'h11111111, 32'h22222222, 32'hDEADBEEF);  // slt   slt $t1, $s2, $s2   HEX: 0x0252482A
    end
    /* Task gets made since this is redundant. Helps run through every instruction will given sample register data.
    */
    task cycle_instruction;
        input [31:0] inst, RD1_, RD2_, pca;
        begin
            Instruction <= inst;
            RD1        <= RD1_;
            RD2        <= RD2_;
            PCAddr      <= pca;
            d = Instr1<<2;
            c = PCAddr + d;
            $display("Shifted Instruction 0x%h", d);
            $display("PC Address should be 0x%h", c);
        end 
    endtask
    // Here are the are the two modules both the EX and the control unit
    EX UUT(.ALUSrc(ALUSrc),.ALUOp(ALUOp),.RegDst(RegDst),.PCAddr(PCAddr),.RD1(RD1),.RD2(RD2),.Instr1(Instr1),.Instr2(Instr2),.Instr3(Instr3),.PCAddition(PCAddition),.Zero(Zero),.ALUResult(ALUResult),.RD2Out(RD2Out),.RegDstOut(RegDstOut),.Overflow(Overflow));
    MainControlUnit DUT(.op(opcode),.reg_write(reg_write),.alu_src(ALUSrc),.reg_dst(RegDst),.mem_read(mem_read),.mem_write(mem_write),.mem_to_reg(mem_to_reg),.branch(branch),.alu_op(ALUOp));
                            
endmodule
